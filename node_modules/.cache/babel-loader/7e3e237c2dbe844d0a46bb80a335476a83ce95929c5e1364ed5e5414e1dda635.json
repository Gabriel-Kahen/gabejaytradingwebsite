{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import Papa from'papaparse';import PortfolioChart from'./PortfolioChart';import Sidebar from'./Sidebar';// Helper function to format dates as M/D/YYYY, hh:mm AM/PM in EST.\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function formatDate(dateString){const date=new Date(dateString);// Manually subtract 5 hours (adjust if needed for daylight saving)\ndate.setHours(date.getHours()-5);const options={month:'numeric',day:'numeric',year:'numeric',hour:'numeric',minute:'numeric',hour12:true};return date.toLocaleString('en-US',options);}function App(){const[trades,setTrades]=useState([]);const[portfolioHistory,setPortfolioHistory]=useState([]);const CSV_URL='https://storage.googleapis.com/gabe-jay-stock/data/trade_log.csv';const processTrades=useCallback(data=>{let portfolio=1000000;// starting with $1,000,000\nconst history=[];// Insert an initial data point for the chart:\nhistory.push({time:'Start',portfolio});const processedTrades=data.map(row=>{// Use the helper function to format dates\nconst ticker=row.Stock;const rawBuyTime=row['Entry Time'];const rawSellTime=row['Exit Time'];const buyTime=formatDate(rawBuyTime);const sellTime=formatDate(rawSellTime);const buyPrice=parseFloat(row['Buy Price']);const sellPrice=parseFloat(row['Sell Price']);// Determine the number of shares purchased with $300K\nconst shares=Math.floor(300000/buyPrice);const cost=shares*buyPrice;const proceeds=shares*sellPrice;const profit=proceeds-cost;const percentProfit=profit/cost*100;// Update the portfolio value after each trade\nportfolio+=profit;history.push({time:sellTime,portfolio});return{ticker,buyTime,buyPrice,sellTime,sellPrice,shares,cost,proceeds,profit,percentProfit};});setTrades(processedTrades);setPortfolioHistory(history);},[setTrades,setPortfolioHistory]);const fetchData=useCallback(async()=>{try{const response=await fetch(CSV_URL);const csvData=await response.text();Papa.parse(csvData,{header:true,skipEmptyLines:true,complete:results=>{processTrades(results.data);},error:error=>{console.error('Error parsing CSV:',error);}});}catch(error){console.error('Error fetching CSV data:',error);}},[CSV_URL,processTrades]);useEffect(()=>{fetchData();const interval=setInterval(fetchData,15000);return()=>clearInterval(interval);},[fetchData]);return/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',height:'100vh'},children:[/*#__PURE__*/_jsx(\"div\",{style:{flex:3,padding:'20px'},children:/*#__PURE__*/_jsx(PortfolioChart,{data:portfolioHistory})}),/*#__PURE__*/_jsx(\"div\",{style:{flex:1,padding:'20px',borderLeft:'1px solid #ddd',overflowY:'auto'},children:/*#__PURE__*/_jsx(Sidebar,{trades:trades})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","Papa","PortfolioChart","Sidebar","jsx","_jsx","jsxs","_jsxs","formatDate","dateString","date","Date","setHours","getHours","options","month","day","year","hour","minute","hour12","toLocaleString","App","trades","setTrades","portfolioHistory","setPortfolioHistory","CSV_URL","processTrades","data","portfolio","history","push","time","processedTrades","map","row","ticker","Stock","rawBuyTime","rawSellTime","buyTime","sellTime","buyPrice","parseFloat","sellPrice","shares","Math","floor","cost","proceeds","profit","percentProfit","fetchData","response","fetch","csvData","text","parse","header","skipEmptyLines","complete","results","error","console","interval","setInterval","clearInterval","style","display","height","children","flex","padding","borderLeft","overflowY"],"sources":["/Users/gabrielkahen/Desktop/code/gabejaytrading/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport Papa from 'papaparse';\nimport PortfolioChart from './PortfolioChart';\nimport Sidebar from './Sidebar';\n\n// Helper function to format dates as M/D/YYYY, hh:mm AM/PM in EST.\nfunction formatDate(dateString) {\n  const date = new Date(dateString);\n  // Manually subtract 5 hours (adjust if needed for daylight saving)\n  date.setHours(date.getHours() - 5);\n  const options = {\n    month: 'numeric',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  };\n  return date.toLocaleString('en-US', options);\n}\n\nfunction App() {\n  const [trades, setTrades] = useState([]);\n  const [portfolioHistory, setPortfolioHistory] = useState([]);\n\n  const CSV_URL = 'https://storage.googleapis.com/gabe-jay-stock/data/trade_log.csv';\n\n  const processTrades = useCallback((data) => {\n    let portfolio = 1000000; // starting with $1,000,000\n    const history = [];\n\n    // Insert an initial data point for the chart:\n    history.push({ time: 'Start', portfolio });\n\n    const processedTrades = data.map((row) => {\n      // Use the helper function to format dates\n      const ticker = row.Stock;\n      const rawBuyTime = row['Entry Time'];\n      const rawSellTime = row['Exit Time'];\n      const buyTime = formatDate(rawBuyTime);\n      const sellTime = formatDate(rawSellTime);\n      const buyPrice = parseFloat(row['Buy Price']);\n      const sellPrice = parseFloat(row['Sell Price']);\n\n      // Determine the number of shares purchased with $300K\n      const shares = Math.floor(300000 / buyPrice);\n      const cost = shares * buyPrice;\n      const proceeds = shares * sellPrice;\n      const profit = proceeds - cost;\n      const percentProfit = (profit / cost) * 100;\n\n      // Update the portfolio value after each trade\n      portfolio += profit;\n      history.push({ time: sellTime, portfolio });\n\n      return {\n        ticker,\n        buyTime,\n        buyPrice,\n        sellTime,\n        sellPrice,\n        shares,\n        cost,\n        proceeds,\n        profit,\n        percentProfit\n      };\n    });\n\n    setTrades(processedTrades);\n    setPortfolioHistory(history);\n  }, [setTrades, setPortfolioHistory]);\n\n  const fetchData = useCallback(async () => {\n    try {\n      const response = await fetch(CSV_URL);\n      const csvData = await response.text();\n\n      Papa.parse(csvData, {\n        header: true,\n        skipEmptyLines: true,\n        complete: (results) => {\n          processTrades(results.data);\n        },\n        error: (error) => {\n          console.error('Error parsing CSV:', error);\n        }\n      });\n    } catch (error) {\n      console.error('Error fetching CSV data:', error);\n    }\n  }, [CSV_URL, processTrades]);\n\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 15000);\n    return () => clearInterval(interval);\n  }, [fetchData]);\n\n  return (\n    <div style={{ display: 'flex', height: '100vh' }}>\n      <div style={{ flex: 3, padding: '20px' }}>\n        <PortfolioChart data={portfolioHistory} />\n      </div>\n      <div style={{ flex: 1, padding: '20px', borderLeft: '1px solid #ddd', overflowY: 'auto' }}>\n        <Sidebar trades={trades} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}